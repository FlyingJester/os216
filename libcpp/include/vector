// Copyright (c) 2017-2018 Martin McDonough.  All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#ifndef OS216_STDLIB_VECTOR
#define OS216_STDLIB_VECTOR
#pragma once

#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <new>

#include <os216_std_attributes.hpp>

namespace std {

template<typename T>
class vector{
public:
    typedef T value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef T &reference;
    typedef const T &const_reference;
    typedef T *pointer;
    typedef const T *const_pointer;
    
    typedef pointer iterator;
    typedef const_pointer const_iterator;
private:
    size_type m_size, m_capacity;
    T *m_data;
    
    inline void inner_assign(const size_type count, const T &value){
        T *const data = m_data;
        for(size_type i = 0; i < count; i++){
            new (data + i) T(value);
        }
    }
    
public:
    
    OS216_LIBCPP_CONSTEXPR_CONSTRUCTOR vector()
      : m_size(0)
      , m_capacity(0)
      , m_data(NULL){
        
    }
    
    explicit vector(size_type count)
      : m_size(count)
      , m_capacity(count)
      , m_data((T*)malloc(sizeof(T) * count)){
        for(size_type i = 0; i < count; i++){
            new (m_data + i) T();
        }
    }
    
    vector(size_type count, const T &value)
      : m_size(count)
      , m_capacity(count)
      , m_data((T*)malloc(sizeof(T) * count)){
        inner_assign(count, value);
    }
    
    explicit vector(const vector<T> &other)
      : m_size(other.size())
      , m_capacity(other.size())
      , m_data((T*)malloc(sizeof(T) * other.size())){
        
        T *const data = m_data;
        const size_type size = other.size();
        for(size_type i = 0; i < size; i++){
            new (data + i) T(other[i]);
        }
    }
    
#if __cplusplus >= 201103L
    
    vector(vector<T> &&other){
        memcpy(this, &other, sizeof(vector<T>));
        memset(&other, 0, sizeof(vector<T>));
    }
    
#endif
    
    ~vector(){
        const size_type size = m_size;
        for(size_type i = 0; i < size; i++){
            m_data[i].~T();
        }
        free(m_data);
    }
    
    vector<T> &operator=(const vector<T> &other){
        assign(other);
        return *this;
    }
    
#if __cplusplus >= 201103L
    
    vector<T> &operator=(vector<T> &&other){
        memcpy(this, &other, sizeof(vector<T>));
        memset(&other, 0, sizeof(vector<T>));
        return *this;
    }
    
#endif
    
    void assign(size_type count, const T &value){
        clear();
        reserve(count);
        inner_assign(count, value);
    }
    
    inline T &at(size_type i){
        return m_data[i];
    }
    
    inline const T &at(size_type i) const {
        return m_data[i];
    }
    
    inline T &operator[](size_type i){
        return m_data[i];
    }
    
    inline const T &operator[](size_type i) const {
        return m_data[i];
    }
    
    inline T &front(){
        return m_data[0];
    }
    
    inline const T &front() const {
        return m_data[0];
    }
    
    inline T &back(){
        return m_data[m_size - 1];
    }
    
    inline const T &back() const {
        return m_data[m_size - 1];
    }
    
    inline T *data(){
        return m_data;
    }
    
    inline const T *data() const {
        return m_data;
    }
    
    inline iterator begin(){
        return &front();
    }
    
    inline iterator end(){
        return &back();
    }
    
    inline const_iterator begin() const {
        return &front();
    }
    
    inline const_iterator end() const {
        return &back();
    }
    
    inline const_iterator cbegin() const {
        return &front();
    }
    
    inline const_iterator cend() const {
        return &back();
    }
    
    inline OS216_LIBCPP_CONSTEXPR_FUNC bool empty() const {
        return m_size == 0;
    }
    
    inline OS216_LIBCPP_CONSTEXPR_FUNC size_type size() const {
        return m_size;
    }
    
    static OS216_LIBCPP_CONSTEXPR_FUNC size_type max_size(){
        return 0xFFFFFFFF;
    }
    
    inline void reserve(size_type new_size){
        
        if(new_size > max_size())
            return; // ASSERT!?
        
        if(m_capacity >= new_size)
            return;
        
        T *const dest = (T*)malloc(sizeof(T) * new_size),
            *const src = m_data;
        const size_type size = m_size;
        for(size_type i = 0; i < size; i++){
            new (dest + i) T(src[i]);
            src[i].~T();
        }
        
        m_data = dest;
        m_capacity = new_size;
        free(src);
    }
    
    void push_back(T &that){
        reserve(m_size + 1);
        new (m_data + m_size) T(that);
        m_size++;
    }
    
    void push_back(const T &that){
        reserve(m_size + 1);
        new (m_data + m_size) T(that);
        m_size++;
    }
    
    void clear(){
        T *const data = m_data;
        const size_type size = m_size;
        
        m_size = 0;
        
        for(size_type i = 0; i < size; i++){
            (data + i)->~T();
        }
    }
    
};

} // namespace std

#endif // OS216_STDLIB_VECTOR
